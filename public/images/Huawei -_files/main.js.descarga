(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/comments/main"],{

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./resources/js/comments/main.js":
/*!***************************************!*\
  !*** ./resources/js/comments/main.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"),
    filter = _require.filter; // Global variables


var content_id = "content_comments"; // Get elements

var form_element = document.getElementById("form-comment");
var btn_submit = document.getElementById("btn_submit");
var comment = document.getElementById("comment");
var content = document.getElementById(content_id); /// [ MAIN EVENT ]

window.onload = function () {
  reload_forms();
  reload_textareas();
  load_comments();
};

function reload_forms() {
  $('.form-comment').off('submit');
  $('.form-comment').on('submit', function (e) {
    // Disable button and submit
    e.preventDefault();
    disable_textareas();
    e.target.querySelector("button").disabled = true; // Submit data

    form_element = document.querySelector(".form-comment");
    form_url = form_element.getAttribute("action");
    $.ajax({
      url: form_url,
      type: 'post',
      // data: $("#form-comment").serialize(),
      data: $(e.target).serialize(),
      dataType: 'json',
      success: function success(_response) {
        comment.value = "";
        load_comments();
      },
      error: function error(_response) {
        console.log(_response);
      }
    });
  });
}

function reload_textareas() {
  $(".form-comment").on("input", function (e) {
    root = findAncestor(e.target, ".form-comment");
    text_area = root.querySelector("textarea");
    btn = root.querySelector("button");
    letters_limit = root.querySelector("span.letters");
    length_min = text_area.getAttribute("data-min");
    length_max = text_area.getAttribute("data-limit");
    length = text_area.value.length;
    letters_limit.innerHTML = length_max - length;

    if (length >= length_min && length <= length_max) {
      btn.disabled = false;
    } else {
      btn.disabled = true;
    }
  });
  $("textarea.comment, textarea.comment-comment").on("keypress", function (e) {
    text_area = e.target;
    length_max = text_area.getAttribute("data-limit");

    if (text_area.value.length >= length_max) {
      return false;
    }
  });
}

function disable_textareas() {
  $(".form-comment").off("input");
}

function ajaxLoad(filename, content) {
  var filters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  content = typeof content !== 'undefined' ? content : 'content';
  $('.loading').show();
  $.ajax({
    type: "GET",
    url: filename,
    data: filters,
    contentType: false,
    success: function success(data) {
      $("#" + content).html(data);
      $('.loading').hide();
      pagination_control();
      reload_forms();
      reload_textareas();
      set_extra_comments();
    },
    error: function error(xhr, status, _error) {
      console.log(xhr);
      console.log(_error);
    }
  });
}

function pagination_control() {
  // Look for pagination items
  $('.page-item').click(function (e) {
    e.preventDefault();
    route = e.target.href;

    if (route) {
      ajaxLoad(route, content_id);
    }
  });
}

function load_comments() {
  route = content.getAttribute('data-route');
  filters = {};
  filters_raw = content.getAttribute('data-filters');

  if (filters_raw != null || filters_raw != "") {
    filters = JSON.parse(filters_raw);
  }

  ajaxLoad(route, content_id, filters);
}

function set_extra_comments() {
  // Find add comments buttons
  comments_add = document.querySelectorAll(".comment_add");
  comments_add.forEach(function (comment_add) {
    comment_add.addEventListener("click", function () {
      hide_all_comment_sections();
      root = findAncestor(comment_add, ".row");
      comment_section = root.querySelector(".comment_section");
      comment_section.hidden = false;
    });
  });
}

function hide_all_comment_sections() {
  document.querySelectorAll(".comment_section").forEach(function (el) {
    el.hidden = true;
  });
}

function findAncestor(el, sel) {
  while ((el = el.parentElement) && !(el.matches || el.matchesSelector).call(el, sel)) {
    ;
  }

  return el;
}

/***/ }),

/***/ 28:
/*!*********************************************!*\
  !*** multi ./resources/js/comments/main.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/futureed/html/huawei_code/resources/js/comments/main.js */"./resources/js/comments/main.js");


/***/ })

},[[28,"/js/manifest","/js/vendor"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,