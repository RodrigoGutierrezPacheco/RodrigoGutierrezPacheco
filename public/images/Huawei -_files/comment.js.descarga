(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/classes/comment"],{

/***/ "./node_modules/countable/Countable.js":
/*!*********************************************!*\
  !*** ./node_modules/countable/Countable.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Countable is a script to allow for live paragraph-, word- and character-
 * counting on an HTML element.
 *
 * @author   Sacha Schmid (<https://github.com/RadLikeWhoa>)
 * @version  3.0.1
 * @license  MIT
 * @see      <http://radlikewhoa.github.io/Countable/>
 */

/**
 * Note: For the purpose of this internal documentation, arguments of the type
 * {Nodes} are to be interpreted as either {NodeList} or {Element}.
 */

;(function (global) {

  /**
   * @private
   *
   * `liveElements` holds all elements that have the live-counting
   * functionality bound to them.
   */

  let liveElements = []
  const each = Array.prototype.forEach

  /**
   * `ucs2decode` function from the punycode.js library.
   *
   * Creates an array containing the decimal code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally, this
   * function will convert a pair of surrogate halves (each of which UCS-2
   * exposes as separate characters) into a single code point, matching
   * UTF-16.
   *
   * @see     <http://goo.gl/8M09r>
   * @see     <http://goo.gl/u4UUC>
   *
   * @param   {String}  string   The Unicode input string (UCS-2).
   *
   * @return  {Array}   The new array of code points.
   */

  function decode (string) {
    const output = []
  	let counter = 0
  	const length = string.length

  	while (counter < length) {
  		const value = string.charCodeAt(counter++)

  		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {

  			// It's a high surrogate, and there is a next character.

  			const extra = string.charCodeAt(counter++)

  			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
  				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000)
  			} else {

  				// It's an unmatched surrogate; only append this code unit, in case the
  				// next code unit is the high surrogate of a surrogate pair.

  				output.push(value)
  				counter--
  			}
  		} else {
  			output.push(value)
  		}
  	}

  	return output
  }

  /**
   * `validateArguments` validates the arguments given to each function call.
   * Errors are logged to the console as warnings, but Countable fails
   * silently.
   *
   * @private
   *
   * @param   {Nodes|String}  targets   A (collection of) element(s) or a single
	 *                                    string to validate.
   *
   * @param   {Function}      callback  The callback function to validate.
   *
   * @return  {Boolean}       Returns whether all arguments are vaild.
   */

  function validateArguments (targets, callback) {
    const nodes = Object.prototype.toString.call(targets)
    const targetsValid = typeof targets === 'string' || ((nodes === '[object NodeList]' || nodes === '[object HTMLCollection]') || targets.nodeType === 1)
    const callbackValid = typeof callback === 'function'

    if (!targetsValid) console.error('Countable: Not a valid target')
    if (!callbackValid) console.error('Countable: Not a valid callback function')

    return targetsValid && callbackValid
  }

  /**
   * `count` trims an element's value, optionally strips HTML tags and counts
   * paragraphs, sentences, words, characters and characters plus spaces.
   *
   * @private
   *
   * @param   {Node|String}  target   The target for the count.
   *
   * @param   {Object}   	   options  The options to use for the counting.
   *
   * @return  {Object}       The object containing the number of paragraphs,
   *                         sentences, words, characters and characters
	 *                         plus spaces.
   */

  function count (target, options) {
    let original = '' + (typeof target === 'string' ? target : ('value' in target ? target.value : target.textContent))
    options = options || {}

    /**
     * The initial implementation to allow for HTML tags stripping was created
     * @craniumslows while the current one was created by @Rob--W.
     *
     * @see <http://goo.gl/Exmlr>
     * @see <http://goo.gl/gFQQh>
     */

    if (options.stripTags) original = original.replace(/<\/?[a-z][^>]*>/gi, '')

    if (options.ignore) {
        each.call(options.ignore, function (i) {
            original = original.replace(i, '')
        })
    }

    const trimmed = original.trim()

    /**
     * Most of the performance improvements are based on the works of @epmatsw.
     *
     * @see <http://goo.gl/SWOLB>
     */

    return {
      paragraphs: trimmed ? (trimmed.match(options.hardReturns ? /\n{2,}/g : /\n+/g) || []).length + 1 : 0,
      sentences: trimmed ? (trimmed.match(/[.?!…]+./g) || []).length + 1 : 0,
      words: trimmed ? (trimmed.replace(/['";:,.?¿\-!¡]+/g, '').match(/\S+/g) || []).length : 0,
      characters: trimmed ? decode(trimmed.replace(/\s/g, '')).length : 0,
      all: decode(original).length
    }
  }

  /**
   * This is the main object that will later be exposed to other scripts. It
   * holds all the public methods that can be used to enable the Countable
   * functionality.
   *
   * Some methods accept an optional options parameter. This includes the
   * following options.
   *
   * {Boolean}      hardReturns  Use two returns to seperate a paragraph
   *                             instead of one. (default: false)
   * {Boolean}      stripTags    Strip HTML tags before counting the values.
   *                             (default: false)
   * {Array<Char>}  ignore       A list of characters that should be removed
   *                             ignored when calculating the counters.
   *                             (default: )
   */

  const Countable = {

    /**
     * The `on` method binds the counting handler to all given elements. The
     * event is either `oninput` or `onkeydown`, based on the capabilities of
     * the browser.
     *
     * @param   {Nodes}     elements   All elements that should receive the
     *                                 Countable functionality.
     *
     * @param   {Function}  callback   The callback to fire whenever the
     *                                 element's value changes. The callback is
     *                                 called with the relevant element bound
     *                                 to `this` and the counted values as the
     *                                 single parameter.
     *
     * @param   {Object}    [options]  An object to modify Countable's
     *                                 behaviour.
     *
     * @return  {Object}    Returns the Countable object to allow for chaining.
     */

    on: function (elements, callback, options) {
      if (!validateArguments(elements, callback)) return

      if (!Array.isArray(elements)) {
          elements = [ elements ]
      }

      each.call(elements, function (e) {
          const handler = function () {
            callback.call(e, count(e, options))
          }

          liveElements.push({ element: e, handler: handler })

          handler()

          e.addEventListener('input', handler)
      })

      return this
    },

    /**
     * The `off` method removes the Countable functionality from all given
     * elements.
     *
     * @param   {Nodes}   elements  All elements whose Countable functionality
     *                              should be unbound.
     *
     * @return  {Object}  Returns the Countable object to allow for chaining.
     */

    off: function (elements) {
      if (!validateArguments(elements, function () {})) return

      if (!Array.isArray(elements)) {
          elements = [ elements ]
      }

      liveElements.filter(function (e) {
          return elements.indexOf(e.element) !== -1
      }).forEach(function (e) {
          e.element.removeEventListener('input', e.handler)
      })

      liveElements = liveElements.filter(function (e) {
          return elements.indexOf(e.element) === -1
      })

      return this
    },

    /**
     * The `count` method works mostly like the `live` method, but no events are
     * bound, the functionality is only executed once.
     *
     * @param   {Nodes|String}  targets   All elements that should be counted.
     *
     * @param   {Function}      callback   The callback to fire whenever the
     *                                     element's value changes. The callback
		 *                                     is called with the relevant element
		 *                                     bound to `this` and the counted values
		 *                                     as the single parameter.
     *
     * @param   {Object}        [options]  An object to modify Countable's
     *                                     behaviour.
     *
     * @return  {Object}    Returns the Countable object to allow for chaining.
     */

    count: function (targets, callback, options) {
      if (!validateArguments(targets, callback)) return

      if (!Array.isArray(targets)) {
          targets = [ targets ]
      }

      each.call(targets, function (e) {
          callback.call(e, count(e, options))
      })

      return this
    },

    /**
     * The `enabled` method checks if the live-counting functionality is bound
     * to an element.
     *
     * @param   {Node}     element  All elements that should be checked for the
     *                              Countable functionality.
     *
     * @return  {Boolean}  A boolean value representing whether Countable
     *                     functionality is bound to all given elements.
     */

    enabled: function (elements) {
      if (elements.length === undefined) {
        elements = [ elements ]
      }

      return liveElements.filter(function (e) {
          return elements.indexOf(e.element) !== -1
      }).length === elements.length
    }

  }

  /**
   * Expose Countable depending on the module system used across the
   * application. (Node / CommonJS, AMD, global)
   */

  if (true) {
    module.exports = Countable
  } else {}
}(this));


/***/ }),

/***/ "./resources/js/classes/comment.js":
/*!*****************************************!*\
  !*** ./resources/js/classes/comment.js ***!
  \*****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_Countable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Countable */ "./resources/js/utils/Countable.js");
/* harmony import */ var _utils_Validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Validator */ "./resources/js/utils/Validator.js");



if (document.getElementById("comment-rating")) {
  Object(_utils_Countable__WEBPACK_IMPORTED_MODULE_0__["default"])('#comment-rating');
  _utils_Validator__WEBPACK_IMPORTED_MODULE_1__["default"].init('form#form-comment.rating', {
    comment: {
      required: true,
      rangelength: [5, 500]
    },
    rating: {
      required: true
    }
  }); /// Rating validation
  // Get elements

  var rating_input = document.getElementById("rating_input");
  var rating_number = document.getElementById("rating_number");
  var stars_filled = document.querySelectorAll(".star-filled");
  var stars_empty = document.querySelectorAll(".star-empty"); // Reset input

  rating_input.value = null; // Set click events to icons

  document.querySelectorAll(".star").forEach(function (star) {
    star.addEventListener("mouseenter", function () {
      format_rating(star.getAttribute("value"));
    });
    star.addEventListener("mouseleave", function () {
      format_rating();
    });
    star.addEventListener("click", function () {
      change_rating(star);
    });
  });
}

function format_rating() {
  var score = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  // Get score from input if is not set
  if (score == null) {
    score = rating_input.value;
  } // Set stars visibility


  stars_filled.forEach(function (star_filled) {
    star_filled.hidden = true;

    if (star_filled.getAttribute("value") <= score) {
      star_filled.hidden = false;
    }
  });
  stars_empty.forEach(function (star_empty) {
    star_empty.hidden = true;

    if (star_empty.getAttribute("value") > score) {
      star_empty.hidden = false;
    }
  }); // Change score text

  if (score != null && score != "") {
    rating_number.innerHTML = score;
  } else {
    rating_number.innerHTML = 0;
  }
}

function change_rating(star) {
  rating_input.value = star.getAttribute("value");
}

/***/ }),

/***/ "./resources/js/utils/Countable.js":
/*!*****************************************!*\
  !*** ./resources/js/utils/Countable.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var countable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! countable */ "./node_modules/countable/Countable.js");
/* harmony import */ var countable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(countable__WEBPACK_IMPORTED_MODULE_0__);


var init = function init(selector) {
  var $input = document.querySelector(selector);
  var limit = $input.dataset.limit;
  var label = $input.dataset.label;

  if (!limit || !label) {
    return;
  }

  var $counter = document.createElement('span');
  $counter.classList = 'badge badge-info mr-1';
  $counter.innerText = limit;
  var $label = document.createElement('span');
  $label.classList = 'small';
  $label.innerText = Lang.get(label);
  var $container = document.createElement('div');
  $container.classList = 'float-right';
  $container.appendChild($counter);
  $container.appendChild($label);
  $input.parentNode.appendChild($container, $input);
  label = label !== 'words' ? 'all' : label;
  countable__WEBPACK_IMPORTED_MODULE_0___default.a.on($input, function (counter) {
    var count = limit - counter[label];

    if (count <= 0) {
      $counter.innerText = '0';
      var text = $input.value;

      if (label === 'all') {
        text = text.substring(0, limit - 1);
      } else {
        while (count <= 0) {
          text = text.substring(0, text.lastIndexOf(' '));
          count++;
        }
      }

      $input.value = text;
    } else {
      $counter.innerText = count;
    }
  });
};

/* harmony default export */ __webpack_exports__["default"] = (init);

/***/ }),

/***/ "./resources/js/utils/Validator.js":
/*!*****************************************!*\
  !*** ./resources/js/utils/Validator.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
    Validation.js

    Validation core

    Juan Carlos Espinosa Ceniceros
    EducarUno 2018
*/
// Extend validator
$.validator.addMethod('whitespaces', function (value, element) {
  return value.indexOf(' ') < 0 && value != '';
}, Lang.get('Blank spaces are not allowed'));
$.validator.addMethod('alpha_dash', function (value, element) {
  var regex = new RegExp('^[a-zA-Z0-9_-]+$');
  return value.match(regex);
}, Lang.get('Only letters, numbers, hyphen and underscore are allowed'));
$.validator.setDefaults({
  ignore: false,
  errorElement: 'span',
  errorClass: 'is-invalid small text-danger',
  validClass: 'is-valid'
});
var cfg = {
  errorPlacement: {
    "default": function _default(error, element) {
      if ($(element).parent().hasClass('input-group')) {
        $(element).parent().parent().append(error);
      } else if ($(element).parent().is('label')) {
        $(element).parent().parent().parent().append(error);
      } else {
        $(element).parent().append(error);
      }
    },
    twoLevel: function twoLevel(error, element) {
      $(element).parent().parent().parent().append(error);
    },
    file: function file(error, element) {
      if ($(element).attr('type') == 'file') {
        $(element).parent().parent().parent().parent().append(error);
      } else {
        if ($(element).parent().hasClass('input-group')) {
          $(element).parent().parent().append(error);
        } else {
          $(element).parent().append(error);
        }
      }
    }
  },
  highlight: {
    "default": function _default(element, errorClass, validClass) {
      $(element).removeClass(validClass).addClass(errorClass);
    },
    twoLevel: function twoLevel(element, errorClass, validClass) {
      if ($(element).parent().hasClass('input-group')) {
        $(element).parent().children().removeClass(validClass).removeClass(errorClass);
      }

      $(element).removeClass(validClass).addClass(errorClass);
    },
    file: function file(element, errorClass, validClass) {
      $(element).removeClass(validClass).addClass(errorClass);
    }
  },
  unhighlight: {
    "default": function _default(element, errorClass, validClass) {
      $(element).removeClass(errorClass).addClass(validClass);
      $(element).parent().children('span.' + errorClass).remove();
    },
    twoLevel: function twoLevel(element, errorClass, validClass) {
      if ($(element).parent().hasClass('input-group')) {
        $(element).parent().children().removeClass(errorClass).removeClass(validClass);
      }

      $(element).removeClass(errorClass).addClass(validClass);
      $(element).parent().parent().children('span.' + errorClass).remove();
    },
    file: function file(element, errorClass, validClass) {
      $(element).removeClass(errorClass).addClass(validClass);
      $(element).parent().children('span.' + errorClass).remove();
    }
  },
  invalidHandler: {
    "default": function _default(e, validator) {
      toastr['error'](Lang.get('There are errors in the validation of the fields'));
    },
    collapsePanel: function collapsePanel(e, validator) {
      for (var i = 0; i < validator.errorList.length; i++) {
        $(validator.errorList[i].element).closest('.panel-collapse.collapse').collapse('show');
      }
    }
  },
  submitHandler: {
    "default": function _default($form) {
      $('input[type="submit"]').attr('disabled', true);
      $form.submit();
    }
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  init: function init(form_selector, rules) {
    var messages = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var $form = $(form_selector);
    var forms_count = $form.length;

    if (forms_count == 0) {
      console.warn('Form [' + form_selector + '] does not exist');
      return;
    }

    var config = {
      rules: rules,
      messages: messages,
      invalidHandler: cfg.invalidHandler[options['invalidHandler']] || cfg.invalidHandler['default'],
      errorPlacement: cfg.errorPlacement[options['errorPlacement']] || cfg.errorPlacement['default'],
      highlight: cfg.highlight[options['highlight']] || cfg.highlight['default'],
      unhighlight: cfg.unhighlight[options['unhighlight']] || cfg.unhighlight['default'],
      submitHandler: options['submitHandler'] || cfg.submitHandler['default']
    };

    try {
      var results = [];
      $form.each(function (i) {
        var r = $($form[i]).validate(config);
        results.push(r);
      });
      return forms_count > 1 ? results : results.shift();
    } catch (e) {
      console.error(e);
      return e;
    }
  }
});

/***/ }),

/***/ 66:
/*!***********************************************!*\
  !*** multi ./resources/js/classes/comment.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/futureed/html/huawei_code/resources/js/classes/comment.js */"./resources/js/classes/comment.js");


/***/ })

},[[66,"/js/manifest"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,